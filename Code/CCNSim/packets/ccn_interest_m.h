//
// Generated file, do not edit! Created by nedtool 4.6 from packets/ccn_interest.msg.
//

#ifndef _CCN_INTEREST_M_H_
#define _CCN_INTEREST_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "ccnsim.h"
// }}

/**
 * Class generated from <tt>packets/ccn_interest.msg:6</tt> by nedtool.
 * <pre>
 * packet ccn_interest
 * {
 *     @customize(true);
 *     abstract int path[];//for source routed path (@deprecated)
 * 
 *     chunk_t chunk; //Actual downloading chunk (name+chunk number=64 bit)
 *     int hops = 0; //Hop counter
 * 
 * 
 *     int target = -1; //Generic target of the interest (can be a repository or a generic node)
 *     int rep_target = -1; //Repository target (it MUST be a repository)
 * 
 *     double btw = 0; //Maximum betweenness centrality along the traveled path (used by the btw DS).
 *     int TTL = 10000; //Maximum number of hops (after the packet is discarded)
 *     bool nfound = false; //Set by a client once the timer for a given object is expired, and used by the core in order to invalidate PIT's entries)
 * 
 *     int capacity = 0;
 *     int origin = -1; //Origin of the interest (rarely used)
 *     double Delay = 0; //Delay used by nodes for delay-sending the given packet (useful for simulate any sort of delays)
 * }
 * </pre>
 *
 * ccn_interest_Base is only useful if it gets subclassed, and ccn_interest is derived from it.
 * The minimum code to be written for ccn_interest is the following:
 *
 * <pre>
 * class ccn_interest : public ccn_interest_Base
 * {
 *   private:
 *     void copy(const ccn_interest& other) { ... }

 *   public:
 *     ccn_interest(const char *name=NULL, int kind=0) : ccn_interest_Base(name,kind) {}
 *     ccn_interest(const ccn_interest& other) : ccn_interest_Base(other) {copy(other);}
 *     ccn_interest& operator=(const ccn_interest& other) {if (this==&other) return *this; ccn_interest_Base::operator=(other); copy(other); return *this;}
 *     virtual ccn_interest *dup() const {return new ccn_interest(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from ccn_interest_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(ccn_interest);
 * </pre>
 */
class ccn_interest_Base : public ::cPacket
{
  protected:
    chunk_t chunk_var;
    int hops_var;
    int target_var;
    int rep_target_var;
    double btw_var;
    int TTL_var;
    bool nfound_var;
    int capacity_var;
    int origin_var;
    double Delay_var;

  private:
    void copy(const ccn_interest_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ccn_interest_Base&);
    // make constructors protected to avoid instantiation
    ccn_interest_Base(const char *name=NULL, int kind=0);
    ccn_interest_Base(const ccn_interest_Base& other);
    // make assignment operator protected to force the user override it
    ccn_interest_Base& operator=(const ccn_interest_Base& other);

  public:
    virtual ~ccn_interest_Base();
    virtual ccn_interest_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class ccn_interest");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setPathArraySize(unsigned int size) = 0;
    virtual unsigned int getPathArraySize() const = 0;
    virtual int getPath(unsigned int k) const = 0;
    virtual void setPath(unsigned int k, int path) = 0;
    virtual chunk_t& getChunk();
    virtual const chunk_t& getChunk() const {return const_cast<ccn_interest_Base*>(this)->getChunk();}
    virtual void setChunk(const chunk_t& chunk);
    virtual int getHops() const;
    virtual void setHops(int hops);
    virtual int getTarget() const;
    virtual void setTarget(int target);
    virtual int getRep_target() const;
    virtual void setRep_target(int rep_target);
    virtual double getBtw() const;
    virtual void setBtw(double btw);
    virtual int getTTL() const;
    virtual void setTTL(int TTL);
    virtual bool getNfound() const;
    virtual void setNfound(bool nfound);
    virtual int getCapacity() const;
    virtual void setCapacity(int capacity);
    virtual int getOrigin() const;
    virtual void setOrigin(int origin);
    virtual double getDelay() const;
    virtual void setDelay(double Delay);
};


#endif // ifndef _CCN_INTEREST_M_H_

